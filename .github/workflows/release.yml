name: Release Mod

on:
  workflow_dispatch:

  push:
    branches: [ master ]
    paths:
      - 'build.gradle.kts'

permissions:
  contents: write

jobs:
  build:
    environment: Release
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Extract version from Gradle
        id: get_version
        run: |
          MOD_VERSION=$(grep -oP 'modVersion\s*=\s*\K.+' gradle.properties)
          MC_VERSION=$(grep -oP 'minecraftVersion\s*=\s*\K.+' gradle.properties)
          echo "MOD_VERSION=$MOD_VERSION" >> $GITHUB_ENV
          echo "modVersion=$MOD_VERSION" >> $GITHUB_OUTPUT
          echo "MC_VERSION=$MC_VERSION" >> $GITHUB_ENV
          echo "minecraftVersion=$MC_VERSION" >> $GITHUB_OUTPUT

      - name: Set up JDK
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: 21

      - name: Cache Gradle dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*','**/gradle-wrapper.properties') }}

      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@v3

      - name: Debug token env
        run: echo "Token length is ${#MODRINTH_TOKEN}"
        env:
          MODRINTH_TOKEN: ${{ secrets.MODRINTH_TOKEN }}

      - name: Build & Publish to Modrinth
        env:
          MODRINTH_TOKEN: ${{ secrets.MODRINTH_TOKEN }}
        run: ./gradlew modrinth

      - name: Read Modrinth URL
        id: extract_modr
        run: |
          URL=$(cat build/modrinth_url.txt)
          echo "modrinth_url=$URL" >> $GITHUB_OUTPUT

      - name: Create GitHub Release
        id: create_release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ steps.get_version.outputs.modVersion }}
          name: "Release ${{ steps.get_version.outputs.modVersion }}"
          body_path: CHANGELOG.md
          files: |
            build/libs/*${{ steps.get_version.outputs.version }}.jar
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Notify Discord
        run: |
          # Read full changelog and build the full message
          CHANGELOG=$(cat CHANGELOG.md)
          MESSAGE="# ${{ steps.get_version.outputs.modVersion }}"$'\n'"$CHANGELOG"$'\n'"\
          > ${{ steps.get_version.outputs.version }} ${{ steps.extract_modr.outputs.modrinth_url }}"
      
          # Use jq to encode it safely
          jq -n --arg content "$MESSAGE" '{content: $content}' > payload.json
          
          # Send to Discord
          curl -H "Authorization: Bot ${{ secrets.DISCORD_BOT_TOKEN }}" \
               -H "Content-Type: application/json" \
               -X POST \
               -d @payload.json \
               "https://discord.com/api/v10/channels/${{ secrets.DISCORD_CHANNEL_ID }}/messages"